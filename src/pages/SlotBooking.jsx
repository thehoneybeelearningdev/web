import React, { useState, useEffect } from 'react';
import { Calendar, Clock, Repeat } from 'lucide-react';
import { db } from '../services/firebase';
import {
Â  collection,
Â  doc,
Â  setDoc,
Â  onSnapshot,
Â  addDoc,
Â  query,
Â  where,
Â  getDoc,
Â  getDocs,
Â  updateDoc,
Â  deleteDoc,
Â  arrayUnion,
Â  arrayRemove,
} from 'firebase/firestore';
import { useAuth } from '../context/AuthContext';
import '../styles/SlotBooking.css';

const SlotBooking = () => {
Â  const { currentUser, userRole } = useAuth();
Â  const [windowWidth, setWindowWidth] = useState(window.innerWidth);
Â  const [slots, setSlots] = useState([
    { 
      id: 1, 
      date: '', 
      fromTime: '', 
      toTime: '', 
      fromPeriod: 'AM', 
      toPeriod: 'AM',
      isRecurring: false,
      recurringType: 'weekly', // 'weekly' or 'monthly'
      recurringDays: [], // ['monday', 'tuesday', etc.]
      endDate: '', // End date for recurring slots
      originalSlotId: null // For tracking recurring slot groups
    },
    { 
      id: 2, 
      date: '', 
      fromTime: '', 
      toTime: '', 
      fromPeriod: 'AM', 
      toPeriod: 'AM',
      isRecurring: false,
      recurringType: 'weekly',
      recurringDays: [],
      endDate: '',
      originalSlotId: null
    },
    { 
      id: 3, 
      date: '', 
      fromTime: '', 
      toTime: '', 
      fromPeriod: 'AM', 
      toPeriod: 'AM',
      isRecurring: false,
      recurringType: 'weekly',
      recurringDays: [],
      endDate: '',
      originalSlotId: null
    }
Â  ]);
Â  const [teacherDocId, setTeacherDocId] = useState('');
Â  const [resolvingTeacher, setResolvingTeacher] = useState(true);
Â  // Resolve existing Teacher document ID (prefer email == email; do not create new)
Â  useEffect(() => {
Â  Â  const resolve = async () => {
Â  Â  Â  try {
Â  Â  Â  Â  if (!currentUser) { setTeacherDocId(''); return; }
Â  Â  Â  Â  // Prefer match by email field (lowercased)
Â  Â  Â  Â  const email = String(currentUser.email || '').toLowerCase();
Â  Â  Â  Â  if (email) {
Â  Â  Â  Â  Â  const byEmail = await getDocs(query(collection(db, 'Teacher'), where('email', '==', email)));
Â  Â  Â  Â  Â  if (!byEmail.empty) { setTeacherDocId(byEmail.docs[0].id); return; }
Â  Â  Â  Â  Â  // Try email as document id
Â  Â  Â  Â  Â  const byEmailDocId = await getDoc(doc(db, 'Teacher', email));
Â  Â  Â  Â  Â  if (byEmailDocId.exists()) { setTeacherDocId(byEmailDocId.id); return; }
Â  Â  Â  Â  }
Â  Â  Â  Â  // Fallbacks: direct doc with uid, or query by uid field
Â  Â  Â  Â  const byUidDoc = await getDoc(doc(db, 'Teacher', currentUser.uid));
Â  Â  Â  Â  if (byUidDoc.exists()) { setTeacherDocId(byUidDoc.id); return; }
Â  Â  Â  Â  const byUid = await getDocs(query(collection(db, 'Teacher'), where('uid', '==', currentUser.uid)));
Â  Â  Â  Â  if (!byUid.empty) { setTeacherDocId(byUid.docs[0].id); return; }
Â  Â  Â  Â  setTeacherDocId('');
Â  Â  Â  } finally {
Â  Â  Â  Â  setResolvingTeacher(false);
Â  Â  Â  }
Â  Â  };
Â  Â  setResolvingTeacher(true);
Â  Â  resolve();
Â  }, [currentUser]);
Â  // ðŸ”„ Listen to this teacher's slots from Firestore
Â  useEffect(() => {
Â  Â  if (!teacherDocId) return;
Â  Â  const qSlots = query(collection(db, 'teacherSlots'), where('teacherDocId', '==', teacherDocId));
Â  Â  const unsubscribe = onSnapshot(qSlots, (snapshot) => {
Â  Â  Â  const fetched = snapshot.docs.map(d => ({ docId: d.id, ...d.data() }));
Â  Â  Â  setSlots(prev => prev.map(slot => fetched.find(s => Number(s.id) === Number(slot.id)) || slot));
Â  Â  });
Â  Â  return () => unsubscribe();
Â  }, [teacherDocId]);
Â  useEffect(() => {
Â  Â  const handleResize = () => setWindowWidth(window.innerWidth);
Â  Â  window.addEventListener('resize', handleResize);
Â  Â  return () => window.removeEventListener('resize', handleResize);
Â  }, []);

const handleSave = async () => {
Â  Â  if (!teacherDocId) { alert('Unable to resolve teacher ID.'); return; }
Â  Â  try {
Â  Â  Â  for (const slot of slots) {
Â  Â  Â  Â  if (slot.date && slot.fromTime && slot.toTime) {
          if (slot.isRecurring && slot.recurringDays.length > 0 && slot.endDate) {
            // Handle recurring slots
            await createRecurringSlots(slot);
          } else {
            // Handle single slot (existing logic)
            await createSingleSlot(slot);
          }
        }
      }
      alert('Slots saved successfully!');
    } catch (error) {
      alert('Failed to save slots');
    }
  };

  const createSingleSlot = async (slot) => {
Â  Â  Â  Â  Â  const existingSnap = await getDocs(
Â  Â  Â  Â  Â  Â  query(
Â  Â  Â  Â  Â  Â  Â  collection(db, 'teacherSlots'),
Â  Â  Â  Â  Â  Â  Â  where('teacherDocId', '==', teacherDocId),
Â  Â  Â  Â  Â  Â  Â  where('id', '==', slot.id)
Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  );

Â  Â  Â  Â  Â  const payload = {
Â  Â  Â  Â  Â  Â  id: slot.id,
Â  Â  Â  Â  Â  Â  date: slot.date,
Â  Â  Â  Â  Â  Â  fromTime: slot.fromTime,
Â  Â  Â  Â  Â  Â  toTime: slot.toTime,
Â  Â  Â  Â  Â  Â  fromPeriod: slot.fromPeriod,
Â  Â  Â  Â  Â  Â  toPeriod: slot.toPeriod,
Â  Â  Â  Â  Â  Â  teacherDocId,
      isRecurring: false,
      originalSlotId: null
Â  Â  Â  Â  Â  };

Â  Â  Â  Â  Â  if (!existingSnap.empty) {
Â  Â  Â  Â  Â  Â  const ref = existingSnap.docs[0].ref;
Â  Â  Â  Â  Â  Â  await setDoc(ref, payload, { merge: true });
Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  const newRef = await addDoc(collection(db, 'teacherSlots'), payload);
Â  Â  Â  Â  Â  Â  await updateDoc(doc(db, 'Teacher', teacherDocId), {
Â  Â  Â  Â  Â  Â  Â  mySlots: arrayUnion(newRef.id),
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  }
  };

  const createRecurringSlots = async (slot) => {
    const startDate = new Date(slot.date);
    const endDate = new Date(slot.endDate);
    const recurringSlots = [];

    // Generate all recurring dates
    for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
      const dayName = d.toLocaleDateString('en-US', { weekday: 'lowercase' });
      if (slot.recurringDays.includes(dayName)) {
        recurringSlots.push(new Date(d));
      }
    }

    // Create slots for each recurring date
    for (let i = 0; i < recurringSlots.length; i++) {
      const slotDate = recurringSlots[i];
      const slotId = `${slot.id}_${i}`;
      
      const payload = {
        id: slotId,
        date: slotDate.toISOString().split('T')[0],
        fromTime: slot.fromTime,
        toTime: slot.toTime,
        fromPeriod: slot.fromPeriod,
        toPeriod: slot.toPeriod,
        teacherDocId,
        isRecurring: true,
        recurringType: slot.recurringType,
        originalSlotId: slot.id,
        recurringGroupId: `${slot.id}_${slot.recurringType}_${slot.recurringDays.join('_')}`
      };

      await addDoc(collection(db, 'teacherSlots'), payload);
    }

    // Update teacher's slot list
    await updateDoc(doc(db, 'Teacher', teacherDocId), {
      recurringSlots: arrayUnion({
        originalSlotId: slot.id,
        recurringType: slot.recurringType,
        recurringDays: slot.recurringDays,
        endDate: slot.endDate
      })
    });
  };

Â  const updateSlot = (slotId, field, value) => {
    setSlots(prev => prev.map(slot => 
      slot.id === slotId ? { ...slot, [field]: value } : slot
    ));
  };

  const toggleRecurring = (slotId) => {
    setSlots(prev => prev.map(slot => 
      slot.id === slotId ? { ...slot, isRecurring: !slot.isRecurring } : slot
    ));
  };

  const updateRecurringDays = (slotId, day) => {
    setSlots(prev => prev.map(slot => {
      if (slot.id === slotId) {
        const days = slot.recurringDays.includes(day)
          ? slot.recurringDays.filter(d => d !== day)
          : [...slot.recurringDays, day];
        return { ...slot, recurringDays: days };
      }
      return slot;
    }));
  };

Â  const copySlot = (sourceSlotId, targetSlotId) => {
Â  Â  const sourceSlot = slots.find(slot => slot.id === sourceSlotId);
Â  Â  if (sourceSlot && sourceSlot.date && sourceSlot.fromTime && sourceSlot.toTime) {
Â  Â  Â  setSlots(prev =>
Â  Â  Â  Â  prev.map(slot =>
Â  Â  Â  Â  Â  slot.id === targetSlotId
Â  Â  Â  Â  Â  Â  ? {
Â  Â  Â  Â  Â  Â  Â  ...slot,
Â  Â  Â  Â  Â  Â  Â  date: sourceSlot.date,
Â  Â  Â  Â  Â  Â  Â  fromTime: sourceSlot.fromTime,
Â  Â  Â  Â  Â  Â  Â  toTime: sourceSlot.toTime,
Â  Â  Â  Â  Â  Â  Â  fromPeriod: sourceSlot.fromPeriod,
Â  Â  Â  Â  Â  Â  Â  toPeriod: sourceSlot.toPeriod
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  : slot
Â  Â  Â  Â  )
Â  Â  Â  );
Â  Â  }
Â  };
Â  const clearSlot = async (slotId) => {
Â  const clearedSlot = {
Â  Â  id: slotId,
Â  Â  date: '',
Â  Â  fromTime: '',
Â  Â  toTime: '',
Â  Â  fromPeriod: 'AM',
Â  Â  toPeriod: 'AM',
Â  };
Â  setSlots(prev =>
Â  Â  prev.map(slot =>
Â  Â  Â  slot.id === slotId ? clearedSlot : slot
Â  Â  )
Â  );
Â  try {
Â  Â  Â  if (!teacherDocId) return;
Â  Â  Â  // Find and delete the stored slot for this teacher and this UI slot id
Â  Â  Â  const snap = await getDocs(
Â  Â  Â  Â  query(
Â  Â  Â  Â  Â  collection(db, 'teacherSlots'),
Â  Â  Â  Â  Â  where('teacherDocId', '==', teacherDocId),
Â  Â  Â  Â  Â  where('id', '==', slotId)
Â  Â  Â  Â  )
Â  Â  Â  );
Â  Â  Â  if (!snap.empty) {
Â  Â  Â  Â  const ref = snap.docs[0].ref;
Â  Â  Â  Â  const slotAutoId = snap.docs[0].id;
Â  Â  Â  Â  await deleteDoc(ref);
Â  Â  Â  Â  // Remove from Teacher.mySlots
Â  Â  Â  Â  await updateDoc(doc(db, 'Teacher', teacherDocId), {
Â  Â  Â  Â  Â  mySlots: arrayRemove(slotAutoId),
Â  Â  Â  Â  });
Â  Â  Â  }
Â    } catch (error) {
    // Error clearing slot
  }
};
const generateTimeOptions = () => {
Â  Â  const times = [];
Â  Â  for (let hour = 1; hour <= 12; hour++) {
Â  Â  Â  for (let minute of ['00', '15', '30', '45']) {
Â  Â  Â  Â  const timeStr = `${hour.toString().padStart(2, '0')}:${minute}`;
Â  Â  Â  Â  times.push(timeStr);
Â  Â  Â  }
Â  Â  }
Â  Â  return times;
Â  };
Â  const timeOptions = generateTimeOptions();
Â  const isMobile = windowWidth <= 480;
Â  const isTablet = windowWidth > 480 && windowWidth <= 768;

  const daysOfWeek = [
    { key: 'monday', label: 'Mon' },
    { key: 'tuesday', label: 'Tue' },
    { key: 'wednesday', label: 'Wed' },
    { key: 'thursday', label: 'Thu' },
    { key: 'friday', label: 'Fri' },
    { key: 'saturday', label: 'Sat' },
    { key: 'sunday', label: 'Sun' }
  ];

Â  return (
Â  Â  <div className={`booking-wrapper ${isMobile ? 'mobile' : isTablet ? 'tablet' : 'desktop'}`}>
Â  Â  Â  <div className="booking-card">
Â  Â  Â  Â  <h2 className="booking-title">Teacher Availability Booking</h2>
Â  Â  Â  Â  {slots.map((slot, index) => (
Â  Â  Â  Â  Â  <div key={slot.id} className="slot-card">
Â  Â  Â  Â  Â  Â  <div className={`slot-header ${isTablet ? 'tablet' : ''}`}>
Â  Â  Â  Â  Â  Â  Â  <h3 className="slot-title">
Â  Â  Â  Â  Â  Â  Â  Â  <Calendar size={20} />
Â  Â  Â  Â  Â  Â  Â  Â  Slot {slot.id}
Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  <div className="slot-controls">
               
Â  Â  Â  Â  Â  Â  Â  Â  {index > 0 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => e.target.value && copySlot(parseInt(e.target.value), slot.id)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value=""
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="copy-select"
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="">Copy from...</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {slots.filter(s => s.id < slot.id && s.date).map(s => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option key={s.id} value={s.id}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Slot {s.id} ({s.date})
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => clearSlot(slot.id)} className="clear-btn">Clear</button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  <div className="booking-form-group">
Â  Â  Â  Â  Â  Â  Â  <label>Select Date</label>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="date"
Â  Â  Â  Â  Â  Â  Â  Â  value={slot.date}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => updateSlot(slot.id, 'date', e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  min={new Date().toISOString().split('T')[0]}
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  </div>

            {/* Recurring Options */}
            {slot.isRecurring && (
              <div className="recurring-options">
                <div className="recurring-type">
                  <label>Recurring Type:</label>
                  <select
                    value={slot.recurringType}
                    onChange={(e) => updateSlot(slot.id, 'recurringType', e.target.value)}
                  >
                    <option value="weekly">Weekly</option>
                    <option value="monthly">Monthly</option>
                  </select>
                </div>

                <div className="recurring-days">
                  <label>Repeat on:</label>
                  <div className="days-grid">
                    {daysOfWeek.map(day => (
                      <button
                        key={day.key}
                        type="button"
                        className={`day-btn ${slot.recurringDays.includes(day.key) ? 'selected' : ''}`}
                        onClick={() => updateRecurringDays(slot.id, day.key)}
                      >
                        {day.label}
                      </button>
                    ))}
                  </div>
                </div>

                <div className="recurring-end">
                  <label>End Date:</label>
                  <input
                    type="date"
                    value={slot.endDate}
                    onChange={(e) => updateSlot(slot.id, 'endDate', e.target.value)}
                    min={slot.date || new Date().toISOString().split('T')[0]}
                  />
                </div>
              </div>
            )}

Â  Â  Â  Â  Â  Â  {/* Time Layout */}
Â  Â  Â  Â  Â  Â  <div className={`time-picker ${isMobile ? 'stacked' : isTablet ? 'tablet' : 'desktop'}`}>
Â  Â  Â  Â  Â  Â  Â  {['from', 'to'].map(type => (
Â  Â  Â  Â  Â  Â  Â  Â  <div key={type} className="time-group">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <label>{type === 'from' ? 'From Time' : 'To Time'}</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="time-row">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={slot[`${type}Time`]}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => updateSlot(slot.id, `${type}Time`, e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="">Select time</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {timeOptions.map(time => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option key={time} value={time}>{time}</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={slot[`${type}Period`]}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => updateSlot(slot.id, `${type}Period`, e.target.value)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="AM">AM</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="PM">PM</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {slot.date && slot.fromTime && slot.toTime && (
Â  Â  Â  Â  Â  Â  Â  <div className="slot-summary">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="slot-day">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Clock size={16} />
                  {slot.isRecurring ? (
                    <span>
                      {slot.recurringDays.map(day => 
                        day.charAt(0).toUpperCase() + day.slice(1)
                      ).join(', ')} - {slot.recurringType}
                    </span>
                  ) : (
                    new Date(slot.date).toLocaleDateString('en-US', {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  weekday: isMobile ? 'short' : 'long',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  year: 'numeric',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  month: isMobile ? 'short' : 'long',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  day: 'numeric'
                    })
                  )}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="slot-time">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {slot.fromTime} {slot.fromPeriod} - {slot.toTime} {slot.toPeriod}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
                {slot.isRecurring && slot.endDate && (
                  <div className="slot-end">
                    Until: {new Date(slot.endDate).toLocaleDateString()}
                  </div>
                )}
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  ))}
Â  Â  Â  Â  <button className="submit-btn" onClick={handleSave}>
Â  Â  Â  Â  Â  Save Slot
Â  Â  Â  Â  </button>
Â  Â  Â  </div>

      <style jsx>{`
        .recurring-options {
          background: #f8fafc;
          border-radius: 8px;
          padding: 16px;
          margin: 12px 0;
          border: 1px solid #e2e8f0;
        }
        .recurring-type, .recurring-days, .recurring-end {
          margin-bottom: 12px;
        }
        .recurring-type label, .recurring-days label, .recurring-end label {
          display: block;
          font-weight: 500;
          margin-bottom: 6px;
          color: #4a5568;
        }
        .days-grid {
          display: grid;
          grid-template-columns: repeat(7, 1fr);
          gap: 4px;
        }
        .day-btn {
          padding: 6px 8px;
          border: 1px solid #d1d5db;
          background: white;
          border-radius: 4px;
          font-size: 12px;
          cursor: pointer;
          transition: all 0.2s;
        }
        .day-btn.selected {
          background: #127d8e;
          color: white;
          border-color: #127d8e;
        }
      
      
        .slot-end {
          font-size: 12px;
          color: #6b7280;
          margin-top: 4px;
        }
      `}</style>
Â  Â  </div>
Â  );
};

export default SlotBooking;